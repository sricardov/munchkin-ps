@startuml
class Interface {
  + desenhaTelaInicial()
  + desenhaMesa()
  + desenhaMenu()
  + desenhaConfig()
}

class Jogo {
  - numJogadores: int
  + verificarVencedor(): Jogador
  + encerrarJogo(vencedor: Jogador)
}

class Dado {
  + rolar(): int
}

class Jogador {
  - nome: String
  - nivel: int
  + efeitosAtivos: Carta[]
  + jogarCarta(carta: Carta)
  + vender(jogador: Jogador): boolean
  + morrer()
}

class GerenciadorDeTurno {
  - jogadorAtual: Jogador
  - etapa: Etapa
  - contagem: int
  + terminarTurno()
  + saquearSala(): Carta
  + fazerCaridade()
}

class Mao {
  + usarCarta(carta : Carta)
  + descartar(carta: Carta)
  + verificarCartas()
}

class Inventario {
  - cabeca: EquipamentoCabeca
  - corpo: EquipamentoCorpo
  - pes: EquipamentoPes
  - maoEsquerda: EquipamentoMaos
  - maoDireita: EquipamentoMaos
  - itensEquipados: Item[]
  - itensGuardados: Item[]
  + equiparItem(item: Item)
  + desequiparItem(item: Item)
}

class Luta {
  - monstro: Monstro
  - jogador: Jogador
  + fugir(): boolean
}

class Combate {
  - lutas: Lutas[]
  + calcularResultado(): boolean
  + pedirAjuda(jogador: Jogador, barganha: int): boolean
}

abstract class Efeito {
 + usar():
}

enum Etapa {
  ABRIR_PORTA
  PROCURAR_ENCRENCA
  SAQUEAR_SALA
  CARIDADE
}

abstract class Carta {
  - nome: String
  - descricao: String
  - tipo: TipoCarta
  + usar()
}

class Monstro extends CartaPorta {
  - nivel: int
  - tesouros: int
  - coisaRuim: String
  + aplicarCoisaRuim(jogador: Jogador)
}

class Maldicao extends CartaPorta {
  + sofrerMaldicao()
  + aplicarMaldicao(jogador: Jogador)
}

abstract class Item extends CartaTesouro {
  - nome: string
  - valor: int
  - bonus: int
  - restricoesRaca: Raca[]
  - restricoesClasse: Classe[]
}

class Equipamento extends Item {
  - grande: boolean
  + equipar(): boolean
  + desequipar()
}

class EquipamentoCabeÃ§a extends Equipamento {

}

class EquipamentoCorpo extends Equipamento {

}

class EquipamentoPes extends Equipamento {

}

class EquipamentoMaos extends Equipamento {

}
class EquipamentoUmaMao extends EquipamentoMaos {

}

class EquipamentoDuasMaos extends EquipamentoMaos {

}


class Consumivel extends Item {

}

abstract class Baralho {
  + reiniciarDeck()
  + comprar(): Carta
  + estaVazio(): boolean
  + pegarPrimeiraCarta(): Carta
  + limparPilha(): boolean
}

class BaralhoPortas extends Baralho {
  - descarte: Porta[]
}

class BaralhoTesouros extends Baralho {
  - descarte: Tesouro[]
}

class CartaPorta extends Carta {

}

class CartaTesouro extends Carta {

}

class Raca extends CartaPorta {

}

class Classe extends CartaPorta {
  - nome: String
}

class Habilidade {
  - nome: String
  - efeito: String
  + usar()
}

Interface "1" -- "1" Jogo
Jogo "1" -- "3..6" Jogador
Jogo "1" -- "1" Dado
Jogo "1" -- "1" GerenciadorDeTurno
Jogo "1" --> "1" BaralhoPortas : baralhoPortas
Jogo "1" --> "1" BaralhoTesouros : baralhoTesouros
Jogador "0..1" --> "0..1" Mao
Jogador "0..1" --> "0..1" Inventario
GerenciadorDeTurno "1" -- "0..1" Combate
Combate "0..1" --> "0..*" Luta
Mao "0..1" --> "0..5" Carta
Carta "0..*" --> "0..*" Efeito
Jogador "0..*" --> "0..2" Raca
Jogador "0..*" --> "0..2" Classe
Classe "*" --> "*" Habilidade
BaralhoPortas "1" o-- "0..*" CartaPorta : deck
BaralhoTesouros "1" o-- "0..*" CartaTesouro : deck
@enduml